[["index.html", "Bookdown Tutorial 前言", " Bookdown Tutorial Hank Lee 2021-04-30 前言 寫些前言(屁話)在這… "],["get-started.html", "Chapter 1 Get Started 1.1 初始化bookdown專案 1.2 更新_bookdown.yml中的內容： 1.3 調整_output.yml的內容 1.4 調整index.Rmd 1.5 調整/新增自己的.Rmd檔案 1.6 關閉Jekyll 1.7 Build a book", " Chapter 1 Get Started 1.1 初始化bookdown專案 開始一個bookdown專案很簡單，先在Rstudio開啟一個新專案，選bookdown 開起來後，這個專案資料夾中，就會長成下圖： 可以看到，這個資料夾下的結構，包括幾大塊： 3 個 YAML檔： _bookdown.yml, _output.yml, index.Rmd 6 個範例.rmd檔: 01-Intro.Rmd, …, 06-reference.Rmd git檔： .git資料夾和.gitignore 其他optional可以刪掉的檔：book.bib, preamble.tex, style.css這些 這邊先介紹三個重要的YAML檔： _bookdown.yml: 裡面可以設定章節順序、build出的html/pdf等要output到哪個資料夾 _output.yml: 裡面可以設定你要output的格式(e.g. html電子書, pdf, ePub…)，sidebar的toc想長成怎樣(e.g. header, footer, 或是collapse sub-section)，電子書上提供作者github連結、download連結 index.Rmd: 這會是網頁電子書的homepage，或是pdf書籍的preface。 1.2 更新_bookdown.yml中的內容： 打開原本的_bookdown.yml，並幫他新增兩行指令，變成下面這樣： book_filename: &quot;bookdown_tutorial&quot; delete_merged_file: true language: ui: chapter_name: &quot;Chapter &quot; output_dir: docs new_session: true 一個一個解釋： book_filename: \"bookdown_tutorial\"，這很明顯就是書籍的名稱 delete_merged_file: true： build book時，他會把k個.Rmd檔，先compile成k個.html檔，然後再merge成一個大的.html檔。那這邊設定true，就是只要留merge好的檔就好，原本那k個html檔請幫我刪掉 chapter_name: \"Chapter \"：這會幫你把每個章節的前面，都加上Chapter的字樣 output_dir: docs，這是新加入的指令，要求把build出來的html檔，都放到./docs的資料夾中。會做這樣的設定，是因為之後如果要把這本書，發佈到github pages(或是Netlify)，他們都是去./docs裡面找html檔。 new_session: true：這也是新加入的指令，他的意思是，我會獨立的對每個.Rmd檔做complie，並生出各自的html檔。如果沒做這個設定，那他會先把所有.Rmd檔都merge成一個超大.Rmd檔，然後compile這個超大的.Rmd檔，變成1個html檔。那這樣就很容易因為不同的.Rmd檔裡面用到相同名稱的變數，而造成彼此衝突。 1.3 調整_output.yml的內容 打開_output.yml這個檔案，原本長這樣： bookdown::gitbook: css: style.css config: toc: before: | &lt;li&gt;&lt;a href=&quot;./&quot;&gt;A Minimal Book Example&lt;/a&gt;&lt;/li&gt; after: | &lt;li&gt;&lt;a href=&quot;https://github.com/rstudio/bookdown&quot; target=&quot;blank&quot;&gt;Published with bookdown&lt;/a&gt;&lt;/li&gt; download: [&quot;pdf&quot;, &quot;epub&quot;] bookdown::pdf_book: includes: in_header: preamble.tex latex_engine: xelatex citation_package: natbib keep_tex: yes bookdown::epub_book: default 從架構上，就可以看到，他要output成三種格式： gitbook pdf_book epub_book 那因為，我只有興趣gitbook格式(就是html網頁拉)，所以我會先把pdf_book和epub_book都刪掉 接著講解bookdown::gitbook下的設定： css: style.css: config下，他設定了toc和download這兩塊。toc是網頁左側的outline，他加上before和after，意思是想把toc排列成 before message -&gt; chapter names -&gt; after message 這樣。我們現在從簡，所以刪光before和after。另外，download，是要做出download的按鈕，讓user可以把html下載成pdf或epub。 最終，我們只保留gitbook的part，並刪除css, 刪除config下的toc，改動download的內容，變成： bookdown::gitbook: config: download: [&quot;pdf&quot;, &quot;epub&quot;] 1.4 調整index.Rmd 記得，index.Rmd是唯一可以在最上面寫YAML指令的檔案，其他.Rmd檔都不行 1.5 調整/新增自己的.Rmd檔案 現在可以把根目錄下的.Rmd檔全刪了，這都不是我要的 我可以開一個新的.Rmd檔，最上面不能有YAML設定，而是以 # Level 1 Header當開頭 這個Header就會是到時候顯示出來的章節名稱 1.6 關閉Jekyll 之後我們如果想發佈在GitHub pages，那需要先關閉Jekyll。因為GitHub Pages預設會使用Jekull來建立你的statis site，但，R Markdown相關的網頁，不需要用Jekyll。 要做到這件事，就是在專案根目錄下，建立一個.nojekyll的空資料夾即可 1.7 Build a book 1.7.1 不要按Knit 不要按 Knit來compile各個.Rmd檔，如果不小心按了，那再自己把_book這個資料夾清掉 1.7.2 按Preview Book來build gitbook 如果你想要render出網頁電子書格式(gitbook)，那就在Addins的下拉式選單中，選取Preview Book，就會完成compile (): 把index.Rmd執行一次，得到index.html，放到./docs之中，這會是首頁 把所有.Rmd檔都執行一次，得到一堆.html檔，都放到./docs之中 按章節順序組出來 上面的做法，等同於在console中key入：bookdown::serve_book()，或是，bookdown::render_book(\"index.Rmd\") 他在背後做的事，可整理成下圖： 1.7.3 key 入 preview_chapter(\"my-chapter.Rmd\") 那這樣做，就像以前在RMarkdown中，對my-chapter.Rmd點Knit。但記得，在bookdown的世界，不要再點Knit了，所以才這樣做。 這樣做的好處是，不用compile所有.Rmd檔，只要compile你指定的my-chapter.Rmd就好 1.7.4 一次build好幾種格式的book 如果你想同時build: gitbook(i.e. 網頁電子書)、pdf_book、epub_book，那你可以按Build頁籤下的Build Book，他就會一次幫你build完 如果你在_output.yml中，只有設定bookdown::gitbook:，那其實你用這邊的Build Book，或是剛剛講的Preview Book，其實是完全一樣的 "],["detail.html", "Chapter 2 Detail 2.1 調整地圖 2.2 與章節組織有關的調整 2.3 和美感有關的調整：Code highlighting 2.4 和sharing有關的調整 2.5 其他之後有時間再整理的內容", " Chapter 2 Detail 2.1 調整地圖 這邊先列出所以可以調整的東西，要去哪些file中做設定，等下才會一一細講： _output.yml _bookdown.yml index.Rmd 各個 .Rmd 設定TOC只顯示第一/二層標題 設定new_session: yes 增加favicon Group chapters into parts 設定TOC的header和footer 設定output_dir: docs Book cover and description appendix頁 設定下載按鈕 設定章節順序 增加github連結 Section (un)numbering 增加edit link 設定章節前綴 增加github連結 2.2 與章節組織有關的調整 2.2.1 設定章節順序 打開_bookdown.yml，加上rmd_file:的指令，範例如下： rmd_files: - index.Rmd - 01-intro.Rmd - 04-application.Rmd - 02-literature.Rmd - 03-method.Rmd - 05-summary.Rmd - 06-references.Rmd 這樣就可以決定章節順序了 2.2.2 有些章節我想隱藏起來 目前publish電子書的共識是：不要寫好完整一本書才上傳，而是一直讓你的書保持著publish的狀態，也讓讀者參與這個寫作的過程(因為他也可以即時提醒你哪裡寫錯要改) 所以我們一邊寫，就會一邊push到github上做發布 但有些章節我可能就寫到一半而已，還不想讓別人看，那有兩種做法： 在bookdown.yml中，指定章節順序時，把還不想公布的章節拿掉就好(compile時就不會去管那些.Rmd檔) 如果你連.Rmd檔都不想讓別人看到，那你可以在local的電腦上開個分支，專門去寫那些章節，等到時機成熟才merge回master，並push到github上。 2.2.3 設定章節前綴 2.2.4 章節的(un)numbering 預設的每個章節都會有numbering，如果想移除，就在.Rmd的heading最後，加上{-} 舉例來說，我們通常不希望index.Rmd裡的標題也被編號，那我們就可以這樣寫: # My section {-} 那他就不會被編號，然後後續的章節標號會調整 所以看起來，如果你要所有章節都不要編號，可能要一個一個去加{-}，有點累。 2.2.5 設定TOC只顯示第一/二層標題 如果你的章節的hierarchies很深，那全部顯示在TOC，會便非常長而難以閱讀。所以這邊就可以顯示，我只要顯示第一層標題就好，或最深只顯示到第二層標題就好 打開_output.yml檔，在config下的toc的下面，增加`collapse: section`，那就只會顯示第一層標題： bookdown::gitbook: config: toc: collapse: section 更詳細的設定，請看bookdonw的官方文件第3.1節 2.2.6 設定TOC的header和footer 其實，就是一開始_output.yml預設的東西，我直接貼在下面就好 bookdown::gitbook: config: toc: before: | &lt;li&gt;&lt;a href=&quot;./&quot;&gt;A Minimal Book Example&lt;/a&gt;&lt;/li&gt; after: | &lt;li&gt;&lt;a href=&quot;https://github.com/rstudio/bookdown&quot; target=&quot;blank&quot;&gt;Published with bookdown&lt;/a&gt;&lt;/li&gt; 2.2.7 TOC中，把相似的章節組成一個區塊 假設我現在在_bookdown.yml中，已經設定好三個章節： - chapter1.1.Rmd - chapter1.2.Rmd - chapter1.3.Rmd 然後，我想在這三個章節上，加上一個group title叫chapter1: blabla，讓讀者在看TOC時，可以清楚知道這三節都屬於chapter1 那做法是： 先開一個.Rmd檔，命名為chapter1.Rmd，裡面的內容寫# (PART\\*) chapter1 {-}。這邊的(PART\\*)，是告訴bookdown，他在TOC中是一個PART，他是不能點的，只是show給你看他的標題。最後的{-}，表示這個title不要幫我編號。 然後，把這個chapter1.Rmd放到_bookdown.yml裡面，變成下面這樣，就搞定了： - chapter1.Rmd - chapter1.1.Rmd - chapter1.2.Rmd - chapter1.3.Rmd 2.2.8 增加appendix 如果想加入appendix，那我會希望在TOC中，先出現appendix的標題(不能點)，然後是各個appendix的章節。 那就可以這樣做：先開個.Rmd檔，命名為appendix.Rmd，內容如下 # (APPENDIX) Appendix {-} # Appendix A Here is the first appendix chapter. # Appendix B Here is the second appendix chapter. 接著，把這個appendix.Rmd，放到_bookdown.yml的目錄下即可 - chapter1.Rmd - chapter1.1.Rmd - chapter1.2.Rmd - chapter1.3.Rmd - appendix.Rmd 2.3 和美感有關的調整：Code highlighting 我們可以設定，code chunk中，highlight的顏色要使用哪種風格 打開_output.yml，增加highlight:的設定，裡面可選default, tango, pygments, kate,…。 bookdown::gitbook: highlight: tango 2.4 和sharing有關的調整 2.4.1 讓讀者可以下載source code 或 edit 建議 打開_output.yml檔 增加edit:, link:和text:三項，設定如下： bookdown::gitbook: config: edit: link: https://github.com/username/repository/edit/master/%s text: &quot;Suggest an edit&quot; 把username換成github的帳號，repository換成這個project的repository名稱，就可以了 那讀者在看你的書時，上面的toolbar，就會有個edit的按鈕，他滑鼠移過去，就會看到顯示的text(e.g. 這邊的Suggest an edit)。點下去後，就會跳出一個視窗，系統會把你的link中的repository內，讀者正在看的這頁的.Rmd檔丟出來給他看，讓他填修改建議。 2.4.2 讓讀者下載成pdf or rmd file 可以在_output.yml中，加入download:的設定，讓讀者可以下載看到的東西： bookdown::gitbook: config: toc: collapse: section download: [&quot;pdf&quot;,&quot;rmd&quot;] 這邊要注意，你寫pdf的話，原本的output format就也要有pdf，這樣才能讓讀者下載到pdf 你有寫rmd的話，那剛剛上一步的edit也要做設定，系統才知道要去哪裡抓rmd檔給讀者 2.4.3 讓讀者連回你的github 如果你想在網頁上加個按鈕，讓user按下去後，就可以連到你的github，那可以這麼做： 先打開_output.yml，加上sharing:的設定，如下： bookdown::gitbook: highlight: tango config: toc: collapse: section download: [&quot;rmd&quot;] sharing: github: yes facebook: no twitter: no all: no 然後打開index.Rmd，在最上面的YAML設定檔中，新增github-repo:，把你的github資訊設定好： title: A Minimal Book Example author: Yihui Xie date: &#39;2021-04-30&#39; site: bookdown::bookdown_site documentclass: book description: This is a minimal example of using the bookdown package to write a book. The output format for this example is bookdown::gitbook. github-repo: your-github/your-repo 那只要讀者點了github圖標，就會連到你指定的repository 2.5 其他之後有時間再整理的內容 2.5.1 index.Rmd裡面還很多不知道在寫啥的 原始的index.Rmd裡面，還有很多設定我都不知道在幹麻: documentclass: book bibliography: [book.bib, packages.bib] biblio-style: apalike link-citations: yes 我現在就是先刪光光，反正應該沒差拉 2.5.2 .Rmd裡面還可以設定各種可用的細節 2.5.2.1 Internal cross-references 2.5.2.2 Numbering and referencing equations 2.5.2.3 Figures captions 2.5.2.4 Tables 2.5.2.5 Citations 2.5.3 Footnotes "]]
